# -*- coding: utf-8 -*-
"""sfp_pc1.ipynb
Automatically generated by Colaboratory.
By sujeong lim
"""

import numpy as np
from sklearn.model_selection import train_test_split
from google.colab import drive
from sklearn.naive_bayes import GaussianNB
from sklearn import svm               
from sklearn import tree
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
from sklearn.metrics import classification_report
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix

drive.mount("/content/drive")
f = open("",'r')
# 1109
instances = f.readlines()
x = []
y = []
for i in instances:
  a = i.split(',')
  if a.pop().replace("\n","") == 'false':
    y.append(1)
  else:
    y.append(0)
  a = list(map(float,a))
  x.append(a)
x = np.array(x)
y = np.array(y)
f.close()
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=0)

# 나이브 베이즈
gnb = GaussianNB()
gnb.fit(x_train, y_train)
y_test_pred = gnb.predict(x_test)
print("accuracy:",gnb.score(x_test, y_test))
print(classification_report(y_test, y_test_pred))
fpr, tpr, thresholds = roc_curve(y_test, gnb.predict_proba(x_test)[:, 1])
fpr, tpr, thresholds
print(confusion_matrix(y_test, y_test_pred, labels=[1, 0]))
print("auc:",auc(fpr, tpr))
#TP / FN 
#FP / TN

# SVM
clf = svm.SVC(kernel='linear')
clf.fit(x_train, y_train)
y_test_pred=clf.predict(x_test)
print("accuracy:",clf.score(x_test, y_test))
print(classification_report(y_test, y_test_pred))
fpr, tpr, thresholds = roc_curve(y_test, clf.decision_function(x_test))
fpr, tpr, thresholds
print(confusion_matrix(y_test, y_test_pred, labels=[1, 0]))
print("auc:",auc(fpr, tpr))
#TP / FN 
#FP / TN

# Decision tree
clf = tree.DecisionTreeClassifier()
clf.fit(x_train, y_train)
y_test_pred = clf.predict(x_test)
clf.predict_proba(x_test)
clf.score(x_test, y_test)
print("accuracy:",clf.score(x_test, y_test))
print(classification_report(y_test, y_test_pred))
fpr, tpr, thresholds = roc_curve(y_test, clf.predict_proba(x_test)[:,1])
fpr, tpr, thresholds
print(confusion_matrix(y_test, y_test_pred, labels=[1, 0]))
print("auc:",auc(fpr, tpr))
#TP / FN 
#FP / TN